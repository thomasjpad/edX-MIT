L7 PROBLEM 6

def integerDivision(x, a):
    """
    x: a non-negative integer argument
    a: a positive integer argument

    returns: integer, the integer division of x divided by a.
    """
    count=0
    while x >= a:
        count += 1
        x = x - a
    return count

*******************************************************************

L8 PROBLEM 3

def SimpleDivide(item, denom):
    try:
        return item/denom
    except ZeroDivisionError, e:
        return denom

*******************************************************************

          
                    PSET 4
                  **********

************
WORD SCORES
************

def getWordScore(word, n):
    """
    Returns the score for a word. Assumes the word is a valid word.

    The score for a word is the sum of the points for letters in the
    word, multiplied by the length of the word, PLUS 50 points if all n
    letters are used on the first turn.

    Letters are scored as in Scrabble; A is worth 1, B is worth 3, C is
    worth 3, D is worth 2, E is worth 1, and so on (see SCRABBLE_LETTER_VALUES)

    word: string (lowercase letters)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)
    returns: int >= 0
    """
    score = 0
    for letter in word:
        score = score + SCRABBLE_LETTER_VALUES[letter]
    score = score * len(word)
    if len(word) == n:
        score = score + 50
    return score


*******************
DEALING WITH HANDS
*******************

def updateHand(hand, word):
    """
    Assumes that 'hand' has all the letters in word.
    In other words, this assumes that however many times
    a letter appears in 'word', 'hand' has at least as
    many of that letter in it. 

    Updates the hand: uses up the letters in the given word
    and returns the new hand, without those letters in it.

    Has no side effects: does not modify hand.

    word: string
    hand: dictionary (string -> int)    
    returns: dictionary (string -> int)
    """
    hand_copy = hand.copy()
    for letter in word:
        if hand_copy.get(letter, 0):
            hand_copy[letter] -= 1
    return hand_copy


************
VALID WORDS
************

def isValidWord(word, hand, wordList):
    """
    Returns True if word is in the wordList and is entirely
    composed of letters in the hand. Otherwise, returns False.

    Does not mutate hand or wordList.
   
    word: string
    hand: dictionary (string -> int)
    wordList: list of lowercase strings
    """
    if word in wordList:
        letter_dict = {}
        for w in word:
            if not letter_dict.get(w,0):
                letter_dict[w] = 1
            else:
                letter_dict[w] += 1
        for w in word:
            if w in hand:
                if letter_dict.get(w, 0) > 0:
                    if hand.get(w, 0) < letter_dict.get(w, 0):
                        return False
            else:
                return False
        return True
    else: 
        return False


************
HAND LENGTH
************

def calculateHandlen(hand):
    """ 
    Returns the length (number of letters) in the current hand.
    
    hand: dictionary (string int)
    returns: integer
    """
    return sum(hand.values())


***************
PLAYING A HAND
***************

def playHand(hand, wordList, n):
    """
    Allows the user to play the given hand, as follows:

    * The hand is displayed.
    * The user may input a word or a single period (the string ".") 
      to indicate they're done playing
    * Invalid words are rejected, and a message is displayed asking
      the user to choose another word until they enter a valid word or "."
    * When a valid word is entered, it uses up letters from the hand.
    * After every valid word: the score for that word is displayed,
      the remaining letters in the hand are displayed, and the user
      is asked to input another word.
    * The sum of the word scores is displayed when the hand finishes.
    * The hand finishes when there are no more unused letters or the user
      inputs a "."

      hand: dictionary (string -> int)
      wordList: list of lowercase strings
      n: integer (HAND_SIZE; i.e., hand size required for additional points)
      
    """
    wordScore = gameScore = 0
    # As long as there are still letters left in the hand:
    while calculateHandlen(hand):
        # Display the hand
        print "Current Hand: ",  # TO DO - Need this print and letters in same line
        displayHand(hand)
        
        
        # Ask user for input
        word = raw_input( 'Enter word, or a "." to indicate that you are finished: ')
        

        # If the input is a single period:
        if word == '.':
            #print not reqd by the orig_code
            #print " len of input word = 1 hence break "
            print 'Goodbye! Total score: ' + str(gameScore) + ' points.'
            print
            break
            # End the game (break out of the loop)
        else:    
        # Otherwise (the input is not a single period):
            if not isValidWord(word,hand,wordList):
            # If the word is not valid:
            
                # Reject invalid word (print a message followed by a blank line)
                print "Invalid word, please try again."
                print
            else:
            # Otherwise (the word is valid):
                wordScore = getWordScore(word, n)
                gameScore += wordScore
                print '"' + word + '"' + ' earned ' + str(wordScore) +' points. Total: ' + str(gameScore)+ ' points.'
                # Tell the user how many points the word earned, and the updated total score, in one line followed by a blank line
                hand = updateHand(hand,word)
                # Update the hand 
                

    # Game is over (user entered a '.' or ran out of letters), so tell user the total score
    if calculateHandlen(hand) == 0:
        print 'Run out of letters. Total score: ' + str(gameScore) + ' points.'


***************
PLAYING A GAME
***************

def playGame(wordList):
    """
    Allow the user to play an arbitrary number of hands.
 
    1) Asks the user to input 'n' or 'r' or 'e'.
      * If the user inputs 'n', let the user play a new (random) hand.
      * If the user inputs 'r', let the user play the last hand again.
      * If the user inputs 'e', exit the game.
      * If the user inputs anything else, tell them their input was invalid.
 
    2) When done playing the hand, repeat from step 1
    """
    hand = {}
    while True:
      choice = raw_input ('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
      if choice == 'r':
          if hand == {}:
              print 'You have not played a hand yet. Please play a new hand first!'
              print
          else:
              playHand(hand, wordList, HAND_SIZE)
      elif choice == 'n':
          hand = dealHand(HAND_SIZE)
          #hand = {'p': 1, 'z': 1, 'u': 1, 't': 3, 'o': 1}
          playHand(hand, wordList, HAND_SIZE)
      elif choice == 'e':
          return None
      else:
          print "Invalid command."


************************
COMPUTER CHOOSES A WORD
************************

def compChooseWord(hand, wordList, n):
    """
    Given a hand and a wordList, find the word that gives 
    the maximum value score, and return it.

    This word should be calculated by considering all the words
    in the wordList.

    If no words in the wordList can be made from the hand, return None.

    hand: dictionary (string -> int)
    wordList: list (string)
    returns: string or None
    """
    bestScore = 0
    
    bestWord = None

    for word in wordList:
        
        if isValidWord(word,hand,wordList):
            wordScore = getWordScore(word, n)

            if wordScore > bestScore:
                bestScore = wordScore
                bestWord = word
    return bestWord


**********************
COMPUTER PLAYS A HAND
**********************

def compPlayHand(hand, wordList, n):
    """
    Allows the computer to play the given hand, following the same procedure
    as playHand, except instead of the user choosing a word, the computer 
    chooses it.

    1) The hand is displayed.
    2) The computer chooses a word.
    3) After every valid word: the word and the score for that word is 
    displayed, the remaining letters in the hand are displayed, and the 
    computer chooses another word.
    4)  The sum of the word scores is displayed when the hand finishes.
    5)  The hand finishes when the computer has exhausted its possible
    choices (i.e. compChooseWord returns None).
 
    hand: dictionary (string -> int)
    wordList: list (string)
    n: integer (HAND_SIZE; i.e., hand size required for additional points)
    """

    def compChooseWord(hand, wordList, n):
        """
        Given a hand and a wordList, find the word that gives 
        the maximum value score, and return it.

        This word should be calculated by considering all the words
        in the wordList.

        If no words in the wordList can be made from the hand, return None.

        hand: dictionary (string -> int)
        wordList: list (string)
        returns: string or None
        """
        bestScore = 0
    
        bestWord = None

        for word in wordList:
        
            if isValidWord(word,hand,wordList):
                wordScore = getWordScore(word, n)

                if wordScore > bestScore:
                    bestScore = wordScore
                    bestWord = word
        return bestWord


    wordScore = gameScore = 0
    while calculateHandlen(hand):
        print "Current Hand: ",  
        displayHand(hand)
        
        word = compChooseWord(hand, wordList, n)

        if not isValidWord(word,hand,wordList):
            break;
        else:
            wordScore = getWordScore(word, n)
            gameScore += wordScore
            print '"' + word + '"' + ' earned ' + str(wordScore) +' points. Total: ' + str(gameScore)+ ' points.'

            hand = updateHand(hand,word)
    
    print 'Total score: ' + str(gameScore) + ' points.'
    return None


**********************
YOU AND YOUR COMPUTER
**********************

def playGame(wordList):
    """
    Allow the user to play an arbitrary number of hands.
 
    1) Asks the user to input 'n' or 'r' or 'e'.
        * If the user inputs 'e', immediately exit the game.
        * If the user inputs anything that's not 'n', 'r', or 'e', keep asking them again.

    2) Asks the user to input a 'u' or a 'c'.
        * If the user inputs anything that's not 'c' or 'u', keep asking them again.

    3) Switch functionality based on the above choices:
        * If the user inputted 'n', play a new (random) hand.
        * Else, if the user inputted 'r', play the last hand again.
      
        * If the user inputted 'u', let the user play the game
          with the selected hand, using playHand.
        * If the user inputted 'c', let the computer play the 
          game with the selected hand, using compPlayHand.

    4) After the computer or user has played the hand, repeat from step 1

    wordList: list (string)
    """
    hand = {}
    while True:
      choice = raw_input ('Enter n to deal a new hand, r to replay the last hand, or e to end game: ')
      print
      if choice == 'r':
          if hand == {}:
              print 'You have not played a hand yet. Please play a new hand first!'
              print
          else:
              while True:
                  ch = raw_input( 'Enter u to have yourself play, c to have the computer play: ')
                  #print
                  if ch == 'u':
                      playHand(hand, wordList, HAND_SIZE)
                      break
                  elif ch == 'c':
                      compPlayHand(hand,wordList,HAND_SIZE)
                      break
                  else:
                      print "Invalid command."
                      print
                      
      elif choice == 'n':
          hand = dealHand(HAND_SIZE)
          while True:
              ch = raw_input( 'Enter u to have yourself play, c to have the computer play: ')
              #print
              
              if ch == 'u':
                      playHand(hand, wordList, HAND_SIZE)
                      break
              elif ch == 'c':
                      compPlayHand(hand, wordList, HAND_SIZE)
                      break
              else:
                      print "Invalid command."
                      print
                      
              
      elif choice == 'e':
          return None
      else:
          print "Invalid command."

*****************************************************************************************************
